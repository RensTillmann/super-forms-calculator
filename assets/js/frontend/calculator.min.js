(function($) { // Hide scope, no $ conflict

    // @since 1.1.4
    SUPER.after_init_calculator_hook = function(){
        var $functions = super_common_i18n.dynamic_functions.after_init_calculator_hook;
        jQuery.each($functions, function(key, value){
            if(typeof SUPER[value.name] !== 'undefined') SUPER[value.name]();
        });
    }


	// Find the first occurrence of Calculator math
	SUPER.init_calculator_strstr = function( $haystack, $needle, $bool ) {
		var $pos = 0;
		$haystack += "";
		$pos = $haystack.indexOf($needle); if ($pos == -1) {
			return false;
		} else {
			return true;
		}
	}

	// @since 1.1.2
	// Init Calculator
	SUPER.init_calculator_update_data_value = function($data){
		
		// Get the form ID
		var $form_id = parseInt($data.hidden_form_id.value);

		// Now get the form by class
		var $form = $('.super-form-'+$form_id);

		// Now loop through all the calculator elements and update the $data object
		$form.find('.super-calculator').each(function(){
			var $field = $(this).find('.super-shortcode-field');
			if(typeof $field.data('email-float') === 'undefined'){
				var $new_value = $field.data('value');
				var $name = $field.attr('name');
				if(typeof $data[$name] !== 'undefined'){
					$data[$name]['value'] = $new_value;
				}
			}
		});

		return $data;
	}

	// @since 1.1.3
	// Update the math after dynamically adding a new set of field (add more +)
	SUPER.init_calculator_update_math = function($this, $field, $counter, $column, $field_names, $field_labels){
        if($field.hasClass('super-calculator')){
        	var $math = $field.find('.super-calculator-wrapper').data('super-math');
        	if( $math!='' ) {
			    var $regular_expression = /\{(.*?)\}/g;
			    var $array = [];
				var $i = 0;
			    while (($match = $regular_expression.exec($math)) != null) {
			    	$array[$i] = $match[1];
			    	$i++;
			    }
			    for (var $i = 0; $i < $array.length; $i++) {
			    	var $name = $array[$i];
			    	var $new_field = $name+'_'+($counter+1);
			    	if($this.parents('.super-form:eq(0)').find('.super-shortcode-field[name="'+$new_field+'"]').length!=0){
				    	$math = $math.replace('{'+$name+'}', '{'+$new_field+'}');
				    }
			    }
			}
			$field.find('.super-calculator-wrapper').data('super-math', $math);
        }
	}

	// Init Calculator
	SUPER.init_calculator = function($do_before, $do_after){

		if(typeof $do_before === 'undefined') $do_before = true;
		if(typeof $do_after === 'undefined') $do_after = true;

		$('.super-calculator .super-calculator-wrapper').each(function(){
			var $target = $(this);
			if (!SUPER.init_calculator_strstr($target.data('super-numeric-math'), '[')){
		    	$target.data('super-numeric-math', $target.data('super-math'));
			}
			var $form = $(this).parents('.super-form');
		    var $math = $target.data('super-math');
		    if( $math!='' ) {
			    var $regular_expression = /\{(.*?)\}/g;
			    var $array = [];
			    var $value = '';
				var $numeric_math = '';
				var $i = 0;
			    while (($match = $regular_expression.exec($math)) != null) {
			    	$array[$i] = $match[1];
			    	$i++;
			    }
			    if($array.length==0){
			    	$numeric_math = $math;
			    }
				for (var $i = 0; $i < $array.length; $i++) {
			        var $name = $array[$i];
			        var $element = $form.find('.super-shortcode-field[name="'+$name+'"]');

			        // Check if parent column or element is hidden (conditionally hidden)
			        var $hidden = false;
			        $element.parents('.super-shortcode.super-column').each(function(){
			            if($(this).css('display')=='none'){
			                $hidden = true;
			            }
			        });
			        var $parent = $element.parents('.super-shortcode:eq(0)');
			        if( ( $hidden==true )  || ( ( $parent.css('display')=='none' ) && ( !$parent.hasClass('super-hidden') ) ) ) {
				        // Exclude conditionally
				        // Lets just replace the field name with 0 as a value
				        $numeric_math = $target.data('super-numeric-math').replace($name, 0).replace('{', '').replace('}', '');
				        $target.data('super-numeric-math', $numeric_math);
			        }else{
				        if( !$element.length ) {
				        	// Lets just replace the field name with 0 as a value
				        	$numeric_math = $target.data('super-numeric-math').replace($name, 0).replace('{', '').replace('}', '');
				        	$target.data('super-numeric-math', $numeric_math);
				        }else{
				        	var $text_field = true;
				        	var $parent = $element.parents('.super-field:eq(0)');
				        	// Check if dropdown field
					        if( ($parent.hasClass('super-dropdown')) || ($parent.hasClass('super-countries')) ){
					            $text_field = false;
					            var $sum = 0;
					            var $selected = $parent.find('.super-dropdown-ui li.selected:not(.super-placeholder)');
					            $selected.each(function () {
					                $sum += parseFloat($(this).data('value'));
					            });
					            $value = $sum;
					        }
				        	// Check if checkbox field
				        	if($parent.hasClass('super-checkbox')){
				        		$text_field = false;
				        		var $sum = 0;
				        		var $checked = $parent.find('input[type="checkbox"]:checked');
					            $checked.each(function () {
					                $sum += parseFloat($(this).val());
					            });
					            $value = $sum;
				        	}
				        	// Check if datepicker field
				        	if( $parent.hasClass('super-date') ) {
				        		$text_field = false;
				        		if($element.attr('data-return_age')=='true'){
									$value = ($element.attr('data-math-age')) ? parseFloat($element.attr('data-math-age')) : 0;
								}else{
									$value = ($element.attr('data-math-diff')) ? parseFloat($element.attr('data-math-diff')) : 0;
								}
				        	}
				        	// Check if timepicker field
				        	if( $parent.hasClass('super-time') ) {
				        		$text_field = false;
								$value = ($element.attr('data-math-diff')) ? parseFloat($element.attr('data-math-diff')) : 0;
				        	}

				        	// @since 1.1.7
				        	// Check if textarea field
				        	if( $parent.hasClass('super-textarea') ) {
				        		$text_field = false;
								$value = ($element.attr('data-word-count')) ? parseFloat($element.attr('data-word-count')) : 0;
				        	}

					        // Check if text or textarea field
					        if($text_field==true){
								$value = ($element.val()) ? parseFloat($element.val()) : 0;
					        }
					        if(isNaN($value)) $value = 0;
							$numeric_math = $target.data('super-numeric-math').replace($name, $value).replace('{', '').replace('}', '');
				        	$target.data('super-numeric-math', $numeric_math);
				        }
				    }
			    }
			    if($numeric_math==''){
			    	$numeric_math = parseFloat($math);
			    }
			    // Lets save the field value before playing the counter animation
			    var $decimals = $target.data('decimals');
			    var $thousand_separator = $target.data('thousand-separator');
			    var $decimal_separator = $target.data('decimal-separator');
			    var $prev_amount = $target.parent().find('.super-shortcode-field').val();
			    if($prev_amount=='') $prev_amount = (Math.ceil(0 * 100) / 100).toFixed($decimals);
				if(typeof $numeric_math !== 'number'){
					$numeric_math = $numeric_math.replace(/\-/g, ' -');
				}
				var $amount = eval($numeric_math); 
				//$amount = (Math.ceil($amount * 100) / 100).toFixed($decimals);
				$amount = $amount.toFixed($decimals);
			    $target.parent().find('.super-shortcode-field').val($amount);
			    if( (typeof $prev_amount === 'string' ) && ( $prev_amount == 'NaN' ) ) {
			    	return false;
				}else{
					if( (typeof $amount === 'string' ) && ( $amount == 'NaN' ) ) {
				    	return false;
				    }else{
					    // Now lets play the animation :)
					    if(!$target.hasClass('animating')){
					    	$target.addClass('animating');
							$({ Counter: parseFloat($prev_amount) }).animate({ Counter: parseFloat($amount) }, {
								duration: 0,
								easing: 'swing',
								step: function ( now, fx ) {
								    var $regular_expression = '\\d(?=(\\d{' + (3 || 3) + '})+' + ($decimals > 0 ? '\\D' : '$') + ')';
								    var $number = (this.Counter).toFixed($decimals);
								    var $numeric_number = $number;
								    var $number = ($decimal_separator ? $number.replace('.', $decimal_separator) : $number).replace(new RegExp($regular_expression, 'g'), '$&' + ($thousand_separator || ''));
									if ($numeric_number >= 0) {
										$target.find('.super-calculator-currency').find('.super-minus-value').remove();
										$target.find('.super-calculator-amount').text($number);
									}else{
										if(!$target.find('.super-calculator-currency').find('.super-minus-value').length){
											$target.find('.super-calculator-currency').prepend('<span class="super-minus-value">-</span>');
										}
										$target.find('.super-calculator-amount').text($number.replace('-',''));
									}
								},
								complete: function() {
								    var $regular_expression = '\\d(?=(\\d{' + (3 || 3) + '})+' + ($decimals > 0 ? '\\D' : '$') + ')';
								    var $number = (this.Counter).toFixed($decimals);
								    var $numeric_number = $number;
								    var $number = ($decimal_separator ? $number.replace('.', $decimal_separator) : $number).replace(new RegExp($regular_expression, 'g'), '$&' + ($thousand_separator || ''));
			    					var $field = $target.parent().find('.super-shortcode-field');
									if ($numeric_number >= 0) {
										$target.find('.super-calculator-currency').find('.super-minus-value').remove();
										$target.find('.super-calculator-amount').text($number);
			    						var $currency = $target.find('.super-calculator-currency').html();
			    						var $format = $target.find('.super-calculator-format').html();
			    						var $number = $target.find('.super-calculator-amount').html();
			    						if(typeof $field.data('email-float') === 'undefined'){
			    							$field.attr('data-value', $currency+''+$number+''+$format);
			    						}
									}else{
										if(!$target.find('.super-calculator-currency').find('.super-minus-value').length){
											$target.find('.super-calculator-currency').prepend('<span class="super-minus-value">-</span>');
										}
										$target.find('.super-calculator-amount').text($number.replace('-',''));
			    						var $currency = $target.find('.super-calculator-currency').html();
			    						var $format = $target.find('.super-calculator-format').html();
			    						var $number = $target.find('.super-calculator-amount').html();
			    						if(typeof $field.data('email-float') === 'undefined'){
			    							$field.attr('data-value', $currency+''+$number+''+$format);
			    						}
									}
									$target.removeClass('animating');
								}
							});
						}
					}
				}
			}
		});

		// @since 1.1.4
		if( $do_after==true ) {
			SUPER.after_init_calculator_hook();
			SUPER.init_calculator(false, false);
		}

	}
	
})(jQuery);